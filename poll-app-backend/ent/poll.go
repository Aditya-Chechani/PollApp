// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/poll"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Poll is the model entity for the Poll schema.
type Poll struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Poll question/title
	Title string `json:"title,omitempty"`
	// Optional poll description
	Description string `json:"description,omitempty"`
	// Type of poll: single_choice, multiple_choice
	PollType string `json:"poll_type,omitempty"`
	// Email of user who created the poll
	CreatedBy string `json:"created_by,omitempty"`
	// Maximum votes allowed per user
	MaxVotesPerUser int `json:"max_votes_per_user,omitempty"`
	// When the poll expires
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// Poll creation timestamp
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Poll last update timestamp
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PollQuery when eager-loading is set.
	Edges        PollEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PollEdges holds the relations/edges for other nodes in the graph.
type PollEdges struct {
	// Poll options
	Options []*PollOption `json:"options,omitempty"`
	// Votes cast on this poll
	Votes []*Vote `json:"votes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OptionsOrErr returns the Options value or an error if the edge
// was not loaded in eager-loading.
func (e PollEdges) OptionsOrErr() ([]*PollOption, error) {
	if e.loadedTypes[0] {
		return e.Options, nil
	}
	return nil, &NotLoadedError{edge: "options"}
}

// VotesOrErr returns the Votes value or an error if the edge
// was not loaded in eager-loading.
func (e PollEdges) VotesOrErr() ([]*Vote, error) {
	if e.loadedTypes[1] {
		return e.Votes, nil
	}
	return nil, &NotLoadedError{edge: "votes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Poll) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case poll.FieldID, poll.FieldMaxVotesPerUser:
			values[i] = new(sql.NullInt64)
		case poll.FieldTitle, poll.FieldDescription, poll.FieldPollType, poll.FieldCreatedBy:
			values[i] = new(sql.NullString)
		case poll.FieldExpiresAt, poll.FieldCreatedAt, poll.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Poll fields.
func (_m *Poll) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case poll.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case poll.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case poll.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case poll.FieldPollType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field poll_type", values[i])
			} else if value.Valid {
				_m.PollType = value.String
			}
		case poll.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case poll.FieldMaxVotesPerUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_votes_per_user", values[i])
			} else if value.Valid {
				_m.MaxVotesPerUser = int(value.Int64)
			}
		case poll.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				_m.ExpiresAt = value.Time
			}
		case poll.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case poll.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Poll.
// This includes values selected through modifiers, order, etc.
func (_m *Poll) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOptions queries the "options" edge of the Poll entity.
func (_m *Poll) QueryOptions() *PollOptionQuery {
	return NewPollClient(_m.config).QueryOptions(_m)
}

// QueryVotes queries the "votes" edge of the Poll entity.
func (_m *Poll) QueryVotes() *VoteQuery {
	return NewPollClient(_m.config).QueryVotes(_m)
}

// Update returns a builder for updating this Poll.
// Note that you need to call Poll.Unwrap() before calling this method if this Poll
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Poll) Update() *PollUpdateOne {
	return NewPollClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Poll entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Poll) Unwrap() *Poll {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Poll is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Poll) String() string {
	var builder strings.Builder
	builder.WriteString("Poll(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("poll_type=")
	builder.WriteString(_m.PollType)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("max_votes_per_user=")
	builder.WriteString(fmt.Sprintf("%v", _m.MaxVotesPerUser))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(_m.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Polls is a parsable slice of Poll.
type Polls []*Poll

// Code generated by ent, DO NOT EDIT.

package vote

import (
	"backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Vote {
	return predicate.Vote(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Vote {
	return predicate.Vote(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Vote {
	return predicate.Vote(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Vote {
	return predicate.Vote(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Vote {
	return predicate.Vote(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Vote {
	return predicate.Vote(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Vote {
	return predicate.Vote(sql.FieldLTE(FieldID, id))
}

// VoterIdentifier applies equality check predicate on the "voter_identifier" field. It's identical to VoterIdentifierEQ.
func VoterIdentifier(v string) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldVoterIdentifier, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldCreatedAt, v))
}

// VoterIdentifierEQ applies the EQ predicate on the "voter_identifier" field.
func VoterIdentifierEQ(v string) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldVoterIdentifier, v))
}

// VoterIdentifierNEQ applies the NEQ predicate on the "voter_identifier" field.
func VoterIdentifierNEQ(v string) predicate.Vote {
	return predicate.Vote(sql.FieldNEQ(FieldVoterIdentifier, v))
}

// VoterIdentifierIn applies the In predicate on the "voter_identifier" field.
func VoterIdentifierIn(vs ...string) predicate.Vote {
	return predicate.Vote(sql.FieldIn(FieldVoterIdentifier, vs...))
}

// VoterIdentifierNotIn applies the NotIn predicate on the "voter_identifier" field.
func VoterIdentifierNotIn(vs ...string) predicate.Vote {
	return predicate.Vote(sql.FieldNotIn(FieldVoterIdentifier, vs...))
}

// VoterIdentifierGT applies the GT predicate on the "voter_identifier" field.
func VoterIdentifierGT(v string) predicate.Vote {
	return predicate.Vote(sql.FieldGT(FieldVoterIdentifier, v))
}

// VoterIdentifierGTE applies the GTE predicate on the "voter_identifier" field.
func VoterIdentifierGTE(v string) predicate.Vote {
	return predicate.Vote(sql.FieldGTE(FieldVoterIdentifier, v))
}

// VoterIdentifierLT applies the LT predicate on the "voter_identifier" field.
func VoterIdentifierLT(v string) predicate.Vote {
	return predicate.Vote(sql.FieldLT(FieldVoterIdentifier, v))
}

// VoterIdentifierLTE applies the LTE predicate on the "voter_identifier" field.
func VoterIdentifierLTE(v string) predicate.Vote {
	return predicate.Vote(sql.FieldLTE(FieldVoterIdentifier, v))
}

// VoterIdentifierContains applies the Contains predicate on the "voter_identifier" field.
func VoterIdentifierContains(v string) predicate.Vote {
	return predicate.Vote(sql.FieldContains(FieldVoterIdentifier, v))
}

// VoterIdentifierHasPrefix applies the HasPrefix predicate on the "voter_identifier" field.
func VoterIdentifierHasPrefix(v string) predicate.Vote {
	return predicate.Vote(sql.FieldHasPrefix(FieldVoterIdentifier, v))
}

// VoterIdentifierHasSuffix applies the HasSuffix predicate on the "voter_identifier" field.
func VoterIdentifierHasSuffix(v string) predicate.Vote {
	return predicate.Vote(sql.FieldHasSuffix(FieldVoterIdentifier, v))
}

// VoterIdentifierIsNil applies the IsNil predicate on the "voter_identifier" field.
func VoterIdentifierIsNil() predicate.Vote {
	return predicate.Vote(sql.FieldIsNull(FieldVoterIdentifier))
}

// VoterIdentifierNotNil applies the NotNil predicate on the "voter_identifier" field.
func VoterIdentifierNotNil() predicate.Vote {
	return predicate.Vote(sql.FieldNotNull(FieldVoterIdentifier))
}

// VoterIdentifierEqualFold applies the EqualFold predicate on the "voter_identifier" field.
func VoterIdentifierEqualFold(v string) predicate.Vote {
	return predicate.Vote(sql.FieldEqualFold(FieldVoterIdentifier, v))
}

// VoterIdentifierContainsFold applies the ContainsFold predicate on the "voter_identifier" field.
func VoterIdentifierContainsFold(v string) predicate.Vote {
	return predicate.Vote(sql.FieldContainsFold(FieldVoterIdentifier, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldLTE(FieldCreatedAt, v))
}

// HasPoll applies the HasEdge predicate on the "poll" edge.
func HasPoll() predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PollTable, PollColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPollWith applies the HasEdge predicate on the "poll" edge with a given conditions (other predicates).
func HasPollWith(preds ...predicate.Poll) predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := newPollStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOption applies the HasEdge predicate on the "option" edge.
func HasOption() predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OptionTable, OptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOptionWith applies the HasEdge predicate on the "option" edge with a given conditions (other predicates).
func HasOptionWith(preds ...predicate.PollOption) predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := newOptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vote) predicate.Vote {
	return predicate.Vote(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vote) predicate.Vote {
	return predicate.Vote(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vote) predicate.Vote {
	return predicate.Vote(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package polloption

import (
	"backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PollOption {
	return predicate.PollOption(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PollOption {
	return predicate.PollOption(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PollOption {
	return predicate.PollOption(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PollOption {
	return predicate.PollOption(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PollOption {
	return predicate.PollOption(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PollOption {
	return predicate.PollOption(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PollOption {
	return predicate.PollOption(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PollOption {
	return predicate.PollOption(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PollOption {
	return predicate.PollOption(sql.FieldLTE(FieldID, id))
}

// OptionText applies equality check predicate on the "option_text" field. It's identical to OptionTextEQ.
func OptionText(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldEQ(FieldOptionText, v))
}

// VoteCount applies equality check predicate on the "vote_count" field. It's identical to VoteCountEQ.
func VoteCount(v int) predicate.PollOption {
	return predicate.PollOption(sql.FieldEQ(FieldVoteCount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PollOption {
	return predicate.PollOption(sql.FieldEQ(FieldCreatedAt, v))
}

// OptionTextEQ applies the EQ predicate on the "option_text" field.
func OptionTextEQ(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldEQ(FieldOptionText, v))
}

// OptionTextNEQ applies the NEQ predicate on the "option_text" field.
func OptionTextNEQ(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldNEQ(FieldOptionText, v))
}

// OptionTextIn applies the In predicate on the "option_text" field.
func OptionTextIn(vs ...string) predicate.PollOption {
	return predicate.PollOption(sql.FieldIn(FieldOptionText, vs...))
}

// OptionTextNotIn applies the NotIn predicate on the "option_text" field.
func OptionTextNotIn(vs ...string) predicate.PollOption {
	return predicate.PollOption(sql.FieldNotIn(FieldOptionText, vs...))
}

// OptionTextGT applies the GT predicate on the "option_text" field.
func OptionTextGT(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldGT(FieldOptionText, v))
}

// OptionTextGTE applies the GTE predicate on the "option_text" field.
func OptionTextGTE(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldGTE(FieldOptionText, v))
}

// OptionTextLT applies the LT predicate on the "option_text" field.
func OptionTextLT(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldLT(FieldOptionText, v))
}

// OptionTextLTE applies the LTE predicate on the "option_text" field.
func OptionTextLTE(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldLTE(FieldOptionText, v))
}

// OptionTextContains applies the Contains predicate on the "option_text" field.
func OptionTextContains(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldContains(FieldOptionText, v))
}

// OptionTextHasPrefix applies the HasPrefix predicate on the "option_text" field.
func OptionTextHasPrefix(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldHasPrefix(FieldOptionText, v))
}

// OptionTextHasSuffix applies the HasSuffix predicate on the "option_text" field.
func OptionTextHasSuffix(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldHasSuffix(FieldOptionText, v))
}

// OptionTextEqualFold applies the EqualFold predicate on the "option_text" field.
func OptionTextEqualFold(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldEqualFold(FieldOptionText, v))
}

// OptionTextContainsFold applies the ContainsFold predicate on the "option_text" field.
func OptionTextContainsFold(v string) predicate.PollOption {
	return predicate.PollOption(sql.FieldContainsFold(FieldOptionText, v))
}

// VoteCountEQ applies the EQ predicate on the "vote_count" field.
func VoteCountEQ(v int) predicate.PollOption {
	return predicate.PollOption(sql.FieldEQ(FieldVoteCount, v))
}

// VoteCountNEQ applies the NEQ predicate on the "vote_count" field.
func VoteCountNEQ(v int) predicate.PollOption {
	return predicate.PollOption(sql.FieldNEQ(FieldVoteCount, v))
}

// VoteCountIn applies the In predicate on the "vote_count" field.
func VoteCountIn(vs ...int) predicate.PollOption {
	return predicate.PollOption(sql.FieldIn(FieldVoteCount, vs...))
}

// VoteCountNotIn applies the NotIn predicate on the "vote_count" field.
func VoteCountNotIn(vs ...int) predicate.PollOption {
	return predicate.PollOption(sql.FieldNotIn(FieldVoteCount, vs...))
}

// VoteCountGT applies the GT predicate on the "vote_count" field.
func VoteCountGT(v int) predicate.PollOption {
	return predicate.PollOption(sql.FieldGT(FieldVoteCount, v))
}

// VoteCountGTE applies the GTE predicate on the "vote_count" field.
func VoteCountGTE(v int) predicate.PollOption {
	return predicate.PollOption(sql.FieldGTE(FieldVoteCount, v))
}

// VoteCountLT applies the LT predicate on the "vote_count" field.
func VoteCountLT(v int) predicate.PollOption {
	return predicate.PollOption(sql.FieldLT(FieldVoteCount, v))
}

// VoteCountLTE applies the LTE predicate on the "vote_count" field.
func VoteCountLTE(v int) predicate.PollOption {
	return predicate.PollOption(sql.FieldLTE(FieldVoteCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PollOption {
	return predicate.PollOption(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PollOption {
	return predicate.PollOption(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PollOption {
	return predicate.PollOption(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PollOption {
	return predicate.PollOption(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PollOption {
	return predicate.PollOption(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PollOption {
	return predicate.PollOption(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PollOption {
	return predicate.PollOption(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PollOption {
	return predicate.PollOption(sql.FieldLTE(FieldCreatedAt, v))
}

// HasPoll applies the HasEdge predicate on the "poll" edge.
func HasPoll() predicate.PollOption {
	return predicate.PollOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PollTable, PollColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPollWith applies the HasEdge predicate on the "poll" edge with a given conditions (other predicates).
func HasPollWith(preds ...predicate.Poll) predicate.PollOption {
	return predicate.PollOption(func(s *sql.Selector) {
		step := newPollStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVotes applies the HasEdge predicate on the "votes" edge.
func HasVotes() predicate.PollOption {
	return predicate.PollOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VotesTable, VotesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVotesWith applies the HasEdge predicate on the "votes" edge with a given conditions (other predicates).
func HasVotesWith(preds ...predicate.Vote) predicate.PollOption {
	return predicate.PollOption(func(s *sql.Selector) {
		step := newVotesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PollOption) predicate.PollOption {
	return predicate.PollOption(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PollOption) predicate.PollOption {
	return predicate.PollOption(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PollOption) predicate.PollOption {
	return predicate.PollOption(sql.NotPredicates(p))
}

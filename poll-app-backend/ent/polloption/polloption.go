// Code generated by ent, DO NOT EDIT.

package polloption

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the polloption type in the database.
	Label = "poll_option"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOptionText holds the string denoting the option_text field in the database.
	FieldOptionText = "option_text"
	// FieldVoteCount holds the string denoting the vote_count field in the database.
	FieldVoteCount = "vote_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgePoll holds the string denoting the poll edge name in mutations.
	EdgePoll = "poll"
	// EdgeVotes holds the string denoting the votes edge name in mutations.
	EdgeVotes = "votes"
	// Table holds the table name of the polloption in the database.
	Table = "poll_options"
	// PollTable is the table that holds the poll relation/edge.
	PollTable = "poll_options"
	// PollInverseTable is the table name for the Poll entity.
	// It exists in this package in order to avoid circular dependency with the "poll" package.
	PollInverseTable = "polls"
	// PollColumn is the table column denoting the poll relation/edge.
	PollColumn = "poll_options"
	// VotesTable is the table that holds the votes relation/edge.
	VotesTable = "votes"
	// VotesInverseTable is the table name for the Vote entity.
	// It exists in this package in order to avoid circular dependency with the "vote" package.
	VotesInverseTable = "votes"
	// VotesColumn is the table column denoting the votes relation/edge.
	VotesColumn = "poll_option_votes"
)

// Columns holds all SQL columns for polloption fields.
var Columns = []string{
	FieldID,
	FieldOptionText,
	FieldVoteCount,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "poll_options"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"poll_options",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// OptionTextValidator is a validator for the "option_text" field. It is called by the builders before save.
	OptionTextValidator func(string) error
	// DefaultVoteCount holds the default value on creation for the "vote_count" field.
	DefaultVoteCount int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the PollOption queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOptionText orders the results by the option_text field.
func ByOptionText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOptionText, opts...).ToFunc()
}

// ByVoteCount orders the results by the vote_count field.
func ByVoteCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoteCount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByPollField orders the results by poll field.
func ByPollField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPollStep(), sql.OrderByField(field, opts...))
	}
}

// ByVotesCount orders the results by votes count.
func ByVotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVotesStep(), opts...)
	}
}

// ByVotes orders the results by votes terms.
func ByVotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPollStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PollInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PollTable, PollColumn),
	)
}
func newVotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VotesTable, VotesColumn),
	)
}

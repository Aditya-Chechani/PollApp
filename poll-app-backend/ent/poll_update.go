// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/poll"
	"backend/ent/polloption"
	"backend/ent/predicate"
	"backend/ent/vote"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PollUpdate is the builder for updating Poll entities.
type PollUpdate struct {
	config
	hooks    []Hook
	mutation *PollMutation
}

// Where appends a list predicates to the PollUpdate builder.
func (_u *PollUpdate) Where(ps ...predicate.Poll) *PollUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *PollUpdate) SetTitle(v string) *PollUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *PollUpdate) SetNillableTitle(v *string) *PollUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *PollUpdate) SetDescription(v string) *PollUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *PollUpdate) SetNillableDescription(v *string) *PollUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *PollUpdate) ClearDescription() *PollUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetPollType sets the "poll_type" field.
func (_u *PollUpdate) SetPollType(v string) *PollUpdate {
	_u.mutation.SetPollType(v)
	return _u
}

// SetNillablePollType sets the "poll_type" field if the given value is not nil.
func (_u *PollUpdate) SetNillablePollType(v *string) *PollUpdate {
	if v != nil {
		_u.SetPollType(*v)
	}
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *PollUpdate) SetCreatedBy(v string) *PollUpdate {
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *PollUpdate) SetNillableCreatedBy(v *string) *PollUpdate {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *PollUpdate) ClearCreatedBy() *PollUpdate {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetMaxVotesPerUser sets the "max_votes_per_user" field.
func (_u *PollUpdate) SetMaxVotesPerUser(v int) *PollUpdate {
	_u.mutation.ResetMaxVotesPerUser()
	_u.mutation.SetMaxVotesPerUser(v)
	return _u
}

// SetNillableMaxVotesPerUser sets the "max_votes_per_user" field if the given value is not nil.
func (_u *PollUpdate) SetNillableMaxVotesPerUser(v *int) *PollUpdate {
	if v != nil {
		_u.SetMaxVotesPerUser(*v)
	}
	return _u
}

// AddMaxVotesPerUser adds value to the "max_votes_per_user" field.
func (_u *PollUpdate) AddMaxVotesPerUser(v int) *PollUpdate {
	_u.mutation.AddMaxVotesPerUser(v)
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *PollUpdate) SetExpiresAt(v time.Time) *PollUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *PollUpdate) SetNillableExpiresAt(v *time.Time) *PollUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *PollUpdate) ClearExpiresAt() *PollUpdate {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *PollUpdate) SetCreatedAt(v time.Time) *PollUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *PollUpdate) SetNillableCreatedAt(v *time.Time) *PollUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PollUpdate) SetUpdatedAt(v time.Time) *PollUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddOptionIDs adds the "options" edge to the PollOption entity by IDs.
func (_u *PollUpdate) AddOptionIDs(ids ...int) *PollUpdate {
	_u.mutation.AddOptionIDs(ids...)
	return _u
}

// AddOptions adds the "options" edges to the PollOption entity.
func (_u *PollUpdate) AddOptions(v ...*PollOption) *PollUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOptionIDs(ids...)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (_u *PollUpdate) AddVoteIDs(ids ...int) *PollUpdate {
	_u.mutation.AddVoteIDs(ids...)
	return _u
}

// AddVotes adds the "votes" edges to the Vote entity.
func (_u *PollUpdate) AddVotes(v ...*Vote) *PollUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddVoteIDs(ids...)
}

// Mutation returns the PollMutation object of the builder.
func (_u *PollUpdate) Mutation() *PollMutation {
	return _u.mutation
}

// ClearOptions clears all "options" edges to the PollOption entity.
func (_u *PollUpdate) ClearOptions() *PollUpdate {
	_u.mutation.ClearOptions()
	return _u
}

// RemoveOptionIDs removes the "options" edge to PollOption entities by IDs.
func (_u *PollUpdate) RemoveOptionIDs(ids ...int) *PollUpdate {
	_u.mutation.RemoveOptionIDs(ids...)
	return _u
}

// RemoveOptions removes "options" edges to PollOption entities.
func (_u *PollUpdate) RemoveOptions(v ...*PollOption) *PollUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOptionIDs(ids...)
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (_u *PollUpdate) ClearVotes() *PollUpdate {
	_u.mutation.ClearVotes()
	return _u
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (_u *PollUpdate) RemoveVoteIDs(ids ...int) *PollUpdate {
	_u.mutation.RemoveVoteIDs(ids...)
	return _u
}

// RemoveVotes removes "votes" edges to Vote entities.
func (_u *PollUpdate) RemoveVotes(v ...*Vote) *PollUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveVoteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PollUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PollUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PollUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PollUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PollUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := poll.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PollUpdate) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := poll.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Poll.title": %w`, err)}
		}
	}
	return nil
}

func (_u *PollUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(poll.Table, poll.Columns, sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(poll.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(poll.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(poll.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.PollType(); ok {
		_spec.SetField(poll.FieldPollType, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(poll.FieldCreatedBy, field.TypeString, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(poll.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.MaxVotesPerUser(); ok {
		_spec.SetField(poll.FieldMaxVotesPerUser, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMaxVotesPerUser(); ok {
		_spec.AddField(poll.FieldMaxVotesPerUser, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(poll.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(poll.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(poll.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(poll.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.OptionsTable,
			Columns: []string{poll.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOptionsIDs(); len(nodes) > 0 && !_u.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.OptionsTable,
			Columns: []string{poll.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.OptionsTable,
			Columns: []string{poll.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedVotesIDs(); len(nodes) > 0 && !_u.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poll.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PollUpdateOne is the builder for updating a single Poll entity.
type PollUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PollMutation
}

// SetTitle sets the "title" field.
func (_u *PollUpdateOne) SetTitle(v string) *PollUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *PollUpdateOne) SetNillableTitle(v *string) *PollUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *PollUpdateOne) SetDescription(v string) *PollUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *PollUpdateOne) SetNillableDescription(v *string) *PollUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *PollUpdateOne) ClearDescription() *PollUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetPollType sets the "poll_type" field.
func (_u *PollUpdateOne) SetPollType(v string) *PollUpdateOne {
	_u.mutation.SetPollType(v)
	return _u
}

// SetNillablePollType sets the "poll_type" field if the given value is not nil.
func (_u *PollUpdateOne) SetNillablePollType(v *string) *PollUpdateOne {
	if v != nil {
		_u.SetPollType(*v)
	}
	return _u
}

// SetCreatedBy sets the "created_by" field.
func (_u *PollUpdateOne) SetCreatedBy(v string) *PollUpdateOne {
	_u.mutation.SetCreatedBy(v)
	return _u
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_u *PollUpdateOne) SetNillableCreatedBy(v *string) *PollUpdateOne {
	if v != nil {
		_u.SetCreatedBy(*v)
	}
	return _u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (_u *PollUpdateOne) ClearCreatedBy() *PollUpdateOne {
	_u.mutation.ClearCreatedBy()
	return _u
}

// SetMaxVotesPerUser sets the "max_votes_per_user" field.
func (_u *PollUpdateOne) SetMaxVotesPerUser(v int) *PollUpdateOne {
	_u.mutation.ResetMaxVotesPerUser()
	_u.mutation.SetMaxVotesPerUser(v)
	return _u
}

// SetNillableMaxVotesPerUser sets the "max_votes_per_user" field if the given value is not nil.
func (_u *PollUpdateOne) SetNillableMaxVotesPerUser(v *int) *PollUpdateOne {
	if v != nil {
		_u.SetMaxVotesPerUser(*v)
	}
	return _u
}

// AddMaxVotesPerUser adds value to the "max_votes_per_user" field.
func (_u *PollUpdateOne) AddMaxVotesPerUser(v int) *PollUpdateOne {
	_u.mutation.AddMaxVotesPerUser(v)
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *PollUpdateOne) SetExpiresAt(v time.Time) *PollUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *PollUpdateOne) SetNillableExpiresAt(v *time.Time) *PollUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (_u *PollUpdateOne) ClearExpiresAt() *PollUpdateOne {
	_u.mutation.ClearExpiresAt()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *PollUpdateOne) SetCreatedAt(v time.Time) *PollUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *PollUpdateOne) SetNillableCreatedAt(v *time.Time) *PollUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PollUpdateOne) SetUpdatedAt(v time.Time) *PollUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddOptionIDs adds the "options" edge to the PollOption entity by IDs.
func (_u *PollUpdateOne) AddOptionIDs(ids ...int) *PollUpdateOne {
	_u.mutation.AddOptionIDs(ids...)
	return _u
}

// AddOptions adds the "options" edges to the PollOption entity.
func (_u *PollUpdateOne) AddOptions(v ...*PollOption) *PollUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOptionIDs(ids...)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (_u *PollUpdateOne) AddVoteIDs(ids ...int) *PollUpdateOne {
	_u.mutation.AddVoteIDs(ids...)
	return _u
}

// AddVotes adds the "votes" edges to the Vote entity.
func (_u *PollUpdateOne) AddVotes(v ...*Vote) *PollUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddVoteIDs(ids...)
}

// Mutation returns the PollMutation object of the builder.
func (_u *PollUpdateOne) Mutation() *PollMutation {
	return _u.mutation
}

// ClearOptions clears all "options" edges to the PollOption entity.
func (_u *PollUpdateOne) ClearOptions() *PollUpdateOne {
	_u.mutation.ClearOptions()
	return _u
}

// RemoveOptionIDs removes the "options" edge to PollOption entities by IDs.
func (_u *PollUpdateOne) RemoveOptionIDs(ids ...int) *PollUpdateOne {
	_u.mutation.RemoveOptionIDs(ids...)
	return _u
}

// RemoveOptions removes "options" edges to PollOption entities.
func (_u *PollUpdateOne) RemoveOptions(v ...*PollOption) *PollUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOptionIDs(ids...)
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (_u *PollUpdateOne) ClearVotes() *PollUpdateOne {
	_u.mutation.ClearVotes()
	return _u
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (_u *PollUpdateOne) RemoveVoteIDs(ids ...int) *PollUpdateOne {
	_u.mutation.RemoveVoteIDs(ids...)
	return _u
}

// RemoveVotes removes "votes" edges to Vote entities.
func (_u *PollUpdateOne) RemoveVotes(v ...*Vote) *PollUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveVoteIDs(ids...)
}

// Where appends a list predicates to the PollUpdate builder.
func (_u *PollUpdateOne) Where(ps ...predicate.Poll) *PollUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PollUpdateOne) Select(field string, fields ...string) *PollUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Poll entity.
func (_u *PollUpdateOne) Save(ctx context.Context) (*Poll, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PollUpdateOne) SaveX(ctx context.Context) *Poll {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PollUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PollUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PollUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := poll.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PollUpdateOne) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := poll.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Poll.title": %w`, err)}
		}
	}
	return nil
}

func (_u *PollUpdateOne) sqlSave(ctx context.Context) (_node *Poll, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(poll.Table, poll.Columns, sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Poll.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, poll.FieldID)
		for _, f := range fields {
			if !poll.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != poll.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(poll.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(poll.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(poll.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.PollType(); ok {
		_spec.SetField(poll.FieldPollType, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedBy(); ok {
		_spec.SetField(poll.FieldCreatedBy, field.TypeString, value)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(poll.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.MaxVotesPerUser(); ok {
		_spec.SetField(poll.FieldMaxVotesPerUser, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMaxVotesPerUser(); ok {
		_spec.AddField(poll.FieldMaxVotesPerUser, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(poll.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.ExpiresAtCleared() {
		_spec.ClearField(poll.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(poll.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(poll.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.OptionsTable,
			Columns: []string{poll.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOptionsIDs(); len(nodes) > 0 && !_u.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.OptionsTable,
			Columns: []string{poll.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.OptionsTable,
			Columns: []string{poll.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedVotesIDs(); len(nodes) > 0 && !_u.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Poll{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poll.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

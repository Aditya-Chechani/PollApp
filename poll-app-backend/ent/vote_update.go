// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/poll"
	"backend/ent/polloption"
	"backend/ent/predicate"
	"backend/ent/vote"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VoteUpdate is the builder for updating Vote entities.
type VoteUpdate struct {
	config
	hooks    []Hook
	mutation *VoteMutation
}

// Where appends a list predicates to the VoteUpdate builder.
func (_u *VoteUpdate) Where(ps ...predicate.Vote) *VoteUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetVoterIdentifier sets the "voter_identifier" field.
func (_u *VoteUpdate) SetVoterIdentifier(v string) *VoteUpdate {
	_u.mutation.SetVoterIdentifier(v)
	return _u
}

// SetNillableVoterIdentifier sets the "voter_identifier" field if the given value is not nil.
func (_u *VoteUpdate) SetNillableVoterIdentifier(v *string) *VoteUpdate {
	if v != nil {
		_u.SetVoterIdentifier(*v)
	}
	return _u
}

// ClearVoterIdentifier clears the value of the "voter_identifier" field.
func (_u *VoteUpdate) ClearVoterIdentifier() *VoteUpdate {
	_u.mutation.ClearVoterIdentifier()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *VoteUpdate) SetCreatedAt(v time.Time) *VoteUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *VoteUpdate) SetNillableCreatedAt(v *time.Time) *VoteUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetPollID sets the "poll" edge to the Poll entity by ID.
func (_u *VoteUpdate) SetPollID(id int) *VoteUpdate {
	_u.mutation.SetPollID(id)
	return _u
}

// SetPoll sets the "poll" edge to the Poll entity.
func (_u *VoteUpdate) SetPoll(v *Poll) *VoteUpdate {
	return _u.SetPollID(v.ID)
}

// SetOptionID sets the "option" edge to the PollOption entity by ID.
func (_u *VoteUpdate) SetOptionID(id int) *VoteUpdate {
	_u.mutation.SetOptionID(id)
	return _u
}

// SetOption sets the "option" edge to the PollOption entity.
func (_u *VoteUpdate) SetOption(v *PollOption) *VoteUpdate {
	return _u.SetOptionID(v.ID)
}

// Mutation returns the VoteMutation object of the builder.
func (_u *VoteUpdate) Mutation() *VoteMutation {
	return _u.mutation
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (_u *VoteUpdate) ClearPoll() *VoteUpdate {
	_u.mutation.ClearPoll()
	return _u
}

// ClearOption clears the "option" edge to the PollOption entity.
func (_u *VoteUpdate) ClearOption() *VoteUpdate {
	_u.mutation.ClearOption()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *VoteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VoteUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *VoteUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VoteUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VoteUpdate) check() error {
	if _u.mutation.PollCleared() && len(_u.mutation.PollIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vote.poll"`)
	}
	if _u.mutation.OptionCleared() && len(_u.mutation.OptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vote.option"`)
	}
	return nil
}

func (_u *VoteUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vote.Table, vote.Columns, sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.VoterIdentifier(); ok {
		_spec.SetField(vote.FieldVoterIdentifier, field.TypeString, value)
	}
	if _u.mutation.VoterIdentifierCleared() {
		_spec.ClearField(vote.FieldVoterIdentifier, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(vote.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.PollTable,
			Columns: []string{vote.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.PollTable,
			Columns: []string{vote.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.OptionTable,
			Columns: []string{vote.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.OptionTable,
			Columns: []string{vote.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// VoteUpdateOne is the builder for updating a single Vote entity.
type VoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VoteMutation
}

// SetVoterIdentifier sets the "voter_identifier" field.
func (_u *VoteUpdateOne) SetVoterIdentifier(v string) *VoteUpdateOne {
	_u.mutation.SetVoterIdentifier(v)
	return _u
}

// SetNillableVoterIdentifier sets the "voter_identifier" field if the given value is not nil.
func (_u *VoteUpdateOne) SetNillableVoterIdentifier(v *string) *VoteUpdateOne {
	if v != nil {
		_u.SetVoterIdentifier(*v)
	}
	return _u
}

// ClearVoterIdentifier clears the value of the "voter_identifier" field.
func (_u *VoteUpdateOne) ClearVoterIdentifier() *VoteUpdateOne {
	_u.mutation.ClearVoterIdentifier()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *VoteUpdateOne) SetCreatedAt(v time.Time) *VoteUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *VoteUpdateOne) SetNillableCreatedAt(v *time.Time) *VoteUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetPollID sets the "poll" edge to the Poll entity by ID.
func (_u *VoteUpdateOne) SetPollID(id int) *VoteUpdateOne {
	_u.mutation.SetPollID(id)
	return _u
}

// SetPoll sets the "poll" edge to the Poll entity.
func (_u *VoteUpdateOne) SetPoll(v *Poll) *VoteUpdateOne {
	return _u.SetPollID(v.ID)
}

// SetOptionID sets the "option" edge to the PollOption entity by ID.
func (_u *VoteUpdateOne) SetOptionID(id int) *VoteUpdateOne {
	_u.mutation.SetOptionID(id)
	return _u
}

// SetOption sets the "option" edge to the PollOption entity.
func (_u *VoteUpdateOne) SetOption(v *PollOption) *VoteUpdateOne {
	return _u.SetOptionID(v.ID)
}

// Mutation returns the VoteMutation object of the builder.
func (_u *VoteUpdateOne) Mutation() *VoteMutation {
	return _u.mutation
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (_u *VoteUpdateOne) ClearPoll() *VoteUpdateOne {
	_u.mutation.ClearPoll()
	return _u
}

// ClearOption clears the "option" edge to the PollOption entity.
func (_u *VoteUpdateOne) ClearOption() *VoteUpdateOne {
	_u.mutation.ClearOption()
	return _u
}

// Where appends a list predicates to the VoteUpdate builder.
func (_u *VoteUpdateOne) Where(ps ...predicate.Vote) *VoteUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *VoteUpdateOne) Select(field string, fields ...string) *VoteUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Vote entity.
func (_u *VoteUpdateOne) Save(ctx context.Context) (*Vote, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VoteUpdateOne) SaveX(ctx context.Context) *Vote {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *VoteUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VoteUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VoteUpdateOne) check() error {
	if _u.mutation.PollCleared() && len(_u.mutation.PollIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vote.poll"`)
	}
	if _u.mutation.OptionCleared() && len(_u.mutation.OptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vote.option"`)
	}
	return nil
}

func (_u *VoteUpdateOne) sqlSave(ctx context.Context) (_node *Vote, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vote.Table, vote.Columns, sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vote.FieldID)
		for _, f := range fields {
			if !vote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.VoterIdentifier(); ok {
		_spec.SetField(vote.FieldVoterIdentifier, field.TypeString, value)
	}
	if _u.mutation.VoterIdentifierCleared() {
		_spec.ClearField(vote.FieldVoterIdentifier, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(vote.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.PollTable,
			Columns: []string{vote.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.PollTable,
			Columns: []string{vote.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.OptionTable,
			Columns: []string{vote.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.OptionTable,
			Columns: []string{vote.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vote{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

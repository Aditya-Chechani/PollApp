// Code generated by ent, DO NOT EDIT.

package poll

import (
	"backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Poll {
	return predicate.Poll(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Poll {
	return predicate.Poll(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Poll {
	return predicate.Poll(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Poll {
	return predicate.Poll(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Poll {
	return predicate.Poll(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Poll {
	return predicate.Poll(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Poll {
	return predicate.Poll(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldDescription, v))
}

// PollType applies equality check predicate on the "poll_type" field. It's identical to PollTypeEQ.
func PollType(v string) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldPollType, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldCreatedBy, v))
}

// MaxVotesPerUser applies equality check predicate on the "max_votes_per_user" field. It's identical to MaxVotesPerUserEQ.
func MaxVotesPerUser(v int) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldMaxVotesPerUser, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldExpiresAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Poll {
	return predicate.Poll(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Poll {
	return predicate.Poll(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Poll {
	return predicate.Poll(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Poll {
	return predicate.Poll(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Poll {
	return predicate.Poll(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Poll {
	return predicate.Poll(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Poll {
	return predicate.Poll(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Poll {
	return predicate.Poll(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Poll {
	return predicate.Poll(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Poll {
	return predicate.Poll(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Poll {
	return predicate.Poll(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Poll {
	return predicate.Poll(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Poll {
	return predicate.Poll(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Poll {
	return predicate.Poll(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Poll {
	return predicate.Poll(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Poll {
	return predicate.Poll(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Poll {
	return predicate.Poll(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Poll {
	return predicate.Poll(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Poll {
	return predicate.Poll(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Poll {
	return predicate.Poll(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Poll {
	return predicate.Poll(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Poll {
	return predicate.Poll(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Poll {
	return predicate.Poll(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Poll {
	return predicate.Poll(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Poll {
	return predicate.Poll(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Poll {
	return predicate.Poll(sql.FieldContainsFold(FieldDescription, v))
}

// PollTypeEQ applies the EQ predicate on the "poll_type" field.
func PollTypeEQ(v string) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldPollType, v))
}

// PollTypeNEQ applies the NEQ predicate on the "poll_type" field.
func PollTypeNEQ(v string) predicate.Poll {
	return predicate.Poll(sql.FieldNEQ(FieldPollType, v))
}

// PollTypeIn applies the In predicate on the "poll_type" field.
func PollTypeIn(vs ...string) predicate.Poll {
	return predicate.Poll(sql.FieldIn(FieldPollType, vs...))
}

// PollTypeNotIn applies the NotIn predicate on the "poll_type" field.
func PollTypeNotIn(vs ...string) predicate.Poll {
	return predicate.Poll(sql.FieldNotIn(FieldPollType, vs...))
}

// PollTypeGT applies the GT predicate on the "poll_type" field.
func PollTypeGT(v string) predicate.Poll {
	return predicate.Poll(sql.FieldGT(FieldPollType, v))
}

// PollTypeGTE applies the GTE predicate on the "poll_type" field.
func PollTypeGTE(v string) predicate.Poll {
	return predicate.Poll(sql.FieldGTE(FieldPollType, v))
}

// PollTypeLT applies the LT predicate on the "poll_type" field.
func PollTypeLT(v string) predicate.Poll {
	return predicate.Poll(sql.FieldLT(FieldPollType, v))
}

// PollTypeLTE applies the LTE predicate on the "poll_type" field.
func PollTypeLTE(v string) predicate.Poll {
	return predicate.Poll(sql.FieldLTE(FieldPollType, v))
}

// PollTypeContains applies the Contains predicate on the "poll_type" field.
func PollTypeContains(v string) predicate.Poll {
	return predicate.Poll(sql.FieldContains(FieldPollType, v))
}

// PollTypeHasPrefix applies the HasPrefix predicate on the "poll_type" field.
func PollTypeHasPrefix(v string) predicate.Poll {
	return predicate.Poll(sql.FieldHasPrefix(FieldPollType, v))
}

// PollTypeHasSuffix applies the HasSuffix predicate on the "poll_type" field.
func PollTypeHasSuffix(v string) predicate.Poll {
	return predicate.Poll(sql.FieldHasSuffix(FieldPollType, v))
}

// PollTypeEqualFold applies the EqualFold predicate on the "poll_type" field.
func PollTypeEqualFold(v string) predicate.Poll {
	return predicate.Poll(sql.FieldEqualFold(FieldPollType, v))
}

// PollTypeContainsFold applies the ContainsFold predicate on the "poll_type" field.
func PollTypeContainsFold(v string) predicate.Poll {
	return predicate.Poll(sql.FieldContainsFold(FieldPollType, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Poll {
	return predicate.Poll(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Poll {
	return predicate.Poll(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Poll {
	return predicate.Poll(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Poll {
	return predicate.Poll(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Poll {
	return predicate.Poll(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Poll {
	return predicate.Poll(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Poll {
	return predicate.Poll(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Poll {
	return predicate.Poll(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Poll {
	return predicate.Poll(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Poll {
	return predicate.Poll(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Poll {
	return predicate.Poll(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Poll {
	return predicate.Poll(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Poll {
	return predicate.Poll(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Poll {
	return predicate.Poll(sql.FieldContainsFold(FieldCreatedBy, v))
}

// MaxVotesPerUserEQ applies the EQ predicate on the "max_votes_per_user" field.
func MaxVotesPerUserEQ(v int) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldMaxVotesPerUser, v))
}

// MaxVotesPerUserNEQ applies the NEQ predicate on the "max_votes_per_user" field.
func MaxVotesPerUserNEQ(v int) predicate.Poll {
	return predicate.Poll(sql.FieldNEQ(FieldMaxVotesPerUser, v))
}

// MaxVotesPerUserIn applies the In predicate on the "max_votes_per_user" field.
func MaxVotesPerUserIn(vs ...int) predicate.Poll {
	return predicate.Poll(sql.FieldIn(FieldMaxVotesPerUser, vs...))
}

// MaxVotesPerUserNotIn applies the NotIn predicate on the "max_votes_per_user" field.
func MaxVotesPerUserNotIn(vs ...int) predicate.Poll {
	return predicate.Poll(sql.FieldNotIn(FieldMaxVotesPerUser, vs...))
}

// MaxVotesPerUserGT applies the GT predicate on the "max_votes_per_user" field.
func MaxVotesPerUserGT(v int) predicate.Poll {
	return predicate.Poll(sql.FieldGT(FieldMaxVotesPerUser, v))
}

// MaxVotesPerUserGTE applies the GTE predicate on the "max_votes_per_user" field.
func MaxVotesPerUserGTE(v int) predicate.Poll {
	return predicate.Poll(sql.FieldGTE(FieldMaxVotesPerUser, v))
}

// MaxVotesPerUserLT applies the LT predicate on the "max_votes_per_user" field.
func MaxVotesPerUserLT(v int) predicate.Poll {
	return predicate.Poll(sql.FieldLT(FieldMaxVotesPerUser, v))
}

// MaxVotesPerUserLTE applies the LTE predicate on the "max_votes_per_user" field.
func MaxVotesPerUserLTE(v int) predicate.Poll {
	return predicate.Poll(sql.FieldLTE(FieldMaxVotesPerUser, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.Poll {
	return predicate.Poll(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.Poll {
	return predicate.Poll(sql.FieldNotNull(FieldExpiresAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Poll {
	return predicate.Poll(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOptions applies the HasEdge predicate on the "options" edge.
func HasOptions() predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OptionsTable, OptionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOptionsWith applies the HasEdge predicate on the "options" edge with a given conditions (other predicates).
func HasOptionsWith(preds ...predicate.PollOption) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		step := newOptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVotes applies the HasEdge predicate on the "votes" edge.
func HasVotes() predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VotesTable, VotesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVotesWith applies the HasEdge predicate on the "votes" edge with a given conditions (other predicates).
func HasVotesWith(preds ...predicate.Vote) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		step := newVotesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Poll) predicate.Poll {
	return predicate.Poll(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Poll) predicate.Poll {
	return predicate.Poll(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Poll) predicate.Poll {
	return predicate.Poll(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/poll"
	"backend/ent/polloption"
	"backend/ent/predicate"
	"backend/ent/vote"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PollOptionUpdate is the builder for updating PollOption entities.
type PollOptionUpdate struct {
	config
	hooks    []Hook
	mutation *PollOptionMutation
}

// Where appends a list predicates to the PollOptionUpdate builder.
func (_u *PollOptionUpdate) Where(ps ...predicate.PollOption) *PollOptionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetOptionText sets the "option_text" field.
func (_u *PollOptionUpdate) SetOptionText(v string) *PollOptionUpdate {
	_u.mutation.SetOptionText(v)
	return _u
}

// SetNillableOptionText sets the "option_text" field if the given value is not nil.
func (_u *PollOptionUpdate) SetNillableOptionText(v *string) *PollOptionUpdate {
	if v != nil {
		_u.SetOptionText(*v)
	}
	return _u
}

// SetVoteCount sets the "vote_count" field.
func (_u *PollOptionUpdate) SetVoteCount(v int) *PollOptionUpdate {
	_u.mutation.ResetVoteCount()
	_u.mutation.SetVoteCount(v)
	return _u
}

// SetNillableVoteCount sets the "vote_count" field if the given value is not nil.
func (_u *PollOptionUpdate) SetNillableVoteCount(v *int) *PollOptionUpdate {
	if v != nil {
		_u.SetVoteCount(*v)
	}
	return _u
}

// AddVoteCount adds value to the "vote_count" field.
func (_u *PollOptionUpdate) AddVoteCount(v int) *PollOptionUpdate {
	_u.mutation.AddVoteCount(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *PollOptionUpdate) SetCreatedAt(v time.Time) *PollOptionUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *PollOptionUpdate) SetNillableCreatedAt(v *time.Time) *PollOptionUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetPollID sets the "poll" edge to the Poll entity by ID.
func (_u *PollOptionUpdate) SetPollID(id int) *PollOptionUpdate {
	_u.mutation.SetPollID(id)
	return _u
}

// SetPoll sets the "poll" edge to the Poll entity.
func (_u *PollOptionUpdate) SetPoll(v *Poll) *PollOptionUpdate {
	return _u.SetPollID(v.ID)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (_u *PollOptionUpdate) AddVoteIDs(ids ...int) *PollOptionUpdate {
	_u.mutation.AddVoteIDs(ids...)
	return _u
}

// AddVotes adds the "votes" edges to the Vote entity.
func (_u *PollOptionUpdate) AddVotes(v ...*Vote) *PollOptionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddVoteIDs(ids...)
}

// Mutation returns the PollOptionMutation object of the builder.
func (_u *PollOptionUpdate) Mutation() *PollOptionMutation {
	return _u.mutation
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (_u *PollOptionUpdate) ClearPoll() *PollOptionUpdate {
	_u.mutation.ClearPoll()
	return _u
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (_u *PollOptionUpdate) ClearVotes() *PollOptionUpdate {
	_u.mutation.ClearVotes()
	return _u
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (_u *PollOptionUpdate) RemoveVoteIDs(ids ...int) *PollOptionUpdate {
	_u.mutation.RemoveVoteIDs(ids...)
	return _u
}

// RemoveVotes removes "votes" edges to Vote entities.
func (_u *PollOptionUpdate) RemoveVotes(v ...*Vote) *PollOptionUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveVoteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PollOptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PollOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PollOptionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PollOptionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PollOptionUpdate) check() error {
	if v, ok := _u.mutation.OptionText(); ok {
		if err := polloption.OptionTextValidator(v); err != nil {
			return &ValidationError{Name: "option_text", err: fmt.Errorf(`ent: validator failed for field "PollOption.option_text": %w`, err)}
		}
	}
	if _u.mutation.PollCleared() && len(_u.mutation.PollIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PollOption.poll"`)
	}
	return nil
}

func (_u *PollOptionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(polloption.Table, polloption.Columns, sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.OptionText(); ok {
		_spec.SetField(polloption.FieldOptionText, field.TypeString, value)
	}
	if value, ok := _u.mutation.VoteCount(); ok {
		_spec.SetField(polloption.FieldVoteCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedVoteCount(); ok {
		_spec.AddField(polloption.FieldVoteCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(polloption.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   polloption.PollTable,
			Columns: []string{polloption.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   polloption.PollTable,
			Columns: []string{polloption.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   polloption.VotesTable,
			Columns: []string{polloption.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedVotesIDs(); len(nodes) > 0 && !_u.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   polloption.VotesTable,
			Columns: []string{polloption.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   polloption.VotesTable,
			Columns: []string{polloption.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{polloption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PollOptionUpdateOne is the builder for updating a single PollOption entity.
type PollOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PollOptionMutation
}

// SetOptionText sets the "option_text" field.
func (_u *PollOptionUpdateOne) SetOptionText(v string) *PollOptionUpdateOne {
	_u.mutation.SetOptionText(v)
	return _u
}

// SetNillableOptionText sets the "option_text" field if the given value is not nil.
func (_u *PollOptionUpdateOne) SetNillableOptionText(v *string) *PollOptionUpdateOne {
	if v != nil {
		_u.SetOptionText(*v)
	}
	return _u
}

// SetVoteCount sets the "vote_count" field.
func (_u *PollOptionUpdateOne) SetVoteCount(v int) *PollOptionUpdateOne {
	_u.mutation.ResetVoteCount()
	_u.mutation.SetVoteCount(v)
	return _u
}

// SetNillableVoteCount sets the "vote_count" field if the given value is not nil.
func (_u *PollOptionUpdateOne) SetNillableVoteCount(v *int) *PollOptionUpdateOne {
	if v != nil {
		_u.SetVoteCount(*v)
	}
	return _u
}

// AddVoteCount adds value to the "vote_count" field.
func (_u *PollOptionUpdateOne) AddVoteCount(v int) *PollOptionUpdateOne {
	_u.mutation.AddVoteCount(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *PollOptionUpdateOne) SetCreatedAt(v time.Time) *PollOptionUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *PollOptionUpdateOne) SetNillableCreatedAt(v *time.Time) *PollOptionUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetPollID sets the "poll" edge to the Poll entity by ID.
func (_u *PollOptionUpdateOne) SetPollID(id int) *PollOptionUpdateOne {
	_u.mutation.SetPollID(id)
	return _u
}

// SetPoll sets the "poll" edge to the Poll entity.
func (_u *PollOptionUpdateOne) SetPoll(v *Poll) *PollOptionUpdateOne {
	return _u.SetPollID(v.ID)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (_u *PollOptionUpdateOne) AddVoteIDs(ids ...int) *PollOptionUpdateOne {
	_u.mutation.AddVoteIDs(ids...)
	return _u
}

// AddVotes adds the "votes" edges to the Vote entity.
func (_u *PollOptionUpdateOne) AddVotes(v ...*Vote) *PollOptionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddVoteIDs(ids...)
}

// Mutation returns the PollOptionMutation object of the builder.
func (_u *PollOptionUpdateOne) Mutation() *PollOptionMutation {
	return _u.mutation
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (_u *PollOptionUpdateOne) ClearPoll() *PollOptionUpdateOne {
	_u.mutation.ClearPoll()
	return _u
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (_u *PollOptionUpdateOne) ClearVotes() *PollOptionUpdateOne {
	_u.mutation.ClearVotes()
	return _u
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (_u *PollOptionUpdateOne) RemoveVoteIDs(ids ...int) *PollOptionUpdateOne {
	_u.mutation.RemoveVoteIDs(ids...)
	return _u
}

// RemoveVotes removes "votes" edges to Vote entities.
func (_u *PollOptionUpdateOne) RemoveVotes(v ...*Vote) *PollOptionUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveVoteIDs(ids...)
}

// Where appends a list predicates to the PollOptionUpdate builder.
func (_u *PollOptionUpdateOne) Where(ps ...predicate.PollOption) *PollOptionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PollOptionUpdateOne) Select(field string, fields ...string) *PollOptionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PollOption entity.
func (_u *PollOptionUpdateOne) Save(ctx context.Context) (*PollOption, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PollOptionUpdateOne) SaveX(ctx context.Context) *PollOption {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PollOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PollOptionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PollOptionUpdateOne) check() error {
	if v, ok := _u.mutation.OptionText(); ok {
		if err := polloption.OptionTextValidator(v); err != nil {
			return &ValidationError{Name: "option_text", err: fmt.Errorf(`ent: validator failed for field "PollOption.option_text": %w`, err)}
		}
	}
	if _u.mutation.PollCleared() && len(_u.mutation.PollIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PollOption.poll"`)
	}
	return nil
}

func (_u *PollOptionUpdateOne) sqlSave(ctx context.Context) (_node *PollOption, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(polloption.Table, polloption.Columns, sqlgraph.NewFieldSpec(polloption.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PollOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, polloption.FieldID)
		for _, f := range fields {
			if !polloption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != polloption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.OptionText(); ok {
		_spec.SetField(polloption.FieldOptionText, field.TypeString, value)
	}
	if value, ok := _u.mutation.VoteCount(); ok {
		_spec.SetField(polloption.FieldVoteCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedVoteCount(); ok {
		_spec.AddField(polloption.FieldVoteCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(polloption.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   polloption.PollTable,
			Columns: []string{polloption.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   polloption.PollTable,
			Columns: []string{polloption.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poll.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   polloption.VotesTable,
			Columns: []string{polloption.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedVotesIDs(); len(nodes) > 0 && !_u.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   polloption.VotesTable,
			Columns: []string{polloption.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   polloption.VotesTable,
			Columns: []string{polloption.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PollOption{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{polloption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
